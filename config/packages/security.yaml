security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\UserAuthenticator
            logout:
                path: app_security_logout
                target: app_security_auth

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

    role_hierarchy:
        ROLE_ADMIN: [ROLE_ELEVE, ROLE_RESP, ROLE_PROF, ROLE_GEST]
        ROLE_GEST: [ROLE_ELEVE, ROLE_RESP, ROLE_PROF]
        ROLE_PROF: [ROLE_ELEVE, ROLE_RESP]
        ROLE_RESP: [ROLE_ELEVE]
    
    access_control:
        - { path: ^/security/auth, roles: PUBLIC_ACCESS  }
        - { path: ^/security/login, roles: PUBLIC_ACCESS  }
        - { path: ^/security/logout, roles: PUBLIC_ACCESS  }
        - { path: ^/registration/register, roles: PUBLIC_ACCESS  }
        
        - { path: ^, roles: ROLE_ELEVE }
        - { path: ^/(eleve|cours)/(lister|consulter), roles: ROLE_ELEVE }
        - { path: ^/(eleve|cours|responsable)/(lister|consulter), roles: ROLE_RESP }
        - { path: ^/(eleve|cours|responsable|professeur)/(lister|consulter), roles: ROLE_PROF }
        - { path: ^/(instrument|typeinstrument|accessoire|marque|metier|modele|professeur|cours|intervention|contratpret|professionnel|inscription)/(lister|consulter|ajouter|modifier), roles: ROLE_GEST }
        - { path: ^/.*, roles: ROLE_ADMIN }
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
